unit ServerHorse;

interface

uses
  Horse, System.SysUtils, System.JSON, FireDAC.Comp.Client, System.Generics.Collections,
  Principal.ViewModel, Pessoa.Model, Conexao.Model, Servidor.Controller;

procedure RegistrarEndpoints;

implementation

var
  Controller: TServidorController;

procedure ListarPessoasMemoria(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  Pessoas: TObjectList<TPessoa>;
  Pessoa: TPessoa;
  JSONArray: TJSONArray;
  JSONObj: TJSONObject;
begin
  Pessoas := Controller.ObterPessoas;
  JSONArray := TJSONArray.Create;
  try
    for Pessoa in Pessoas do
    begin
      JSONObj := TJSONObject.Create;
      JSONObj.AddPair('Id', TJSONNumber.Create(Pessoa.Id));
      JSONObj.AddPair('Nome', Pessoa.Nome);
      JSONObj.AddPair('DataNascimento', DateToStr(Pessoa.DataNascimento));
      JSONObj.AddPair('SaldoDevedor', TJSONNumber.Create(Pessoa.SaldoDevedor));
      JSONArray.AddElement(JSONObj);
    end;

    Res.Status(200).Send(JSONArray.ToJSON);
  finally
    JSONArray.Free;
  end;
end;

procedure ListarPessoas(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  Query: TFDQuery;
  JSONObj: TJSONObject;
  JSONArray: TJSONArray;
begin
  JSONArray := TJSONArray.Create;
  try
    Query := Controller.CarregarPessoaBanco;
    try
      while not Query.Eof do
      begin
        JSONObj := TJSONObject.Create;
        JSONObj.AddPair('Id', TJSONNumber.Create(Query.FieldByName('Id').AsInteger));
        JSONObj.AddPair('Nome', Query.FieldByName('NOME').AsString);
        JSONObj.AddPair('DataNascimento', Query.FieldByName('DATA_NASCIMENTO').AsString);
        JSONObj.AddPair('SaldoDevedor', TJSONNumber.Create(Query.FieldByName('SALDO_DEVEDOR').AsFloat));

        JSONArray.AddElement(JSONObj);
        Query.Next;
      end;

      Res.Status(200).Send(JSONArray.ToJSON);
    finally
      Query.Free;
    end;
  except
    on E: Exception do
      Res.Status(500).Send('Erro ao buscar pessoas no banco: ' + E.Message);
  end;
end;

procedure AdicionarPessoa(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  JSONStr: string;
  JSONObj: TJSONObject;
  strDataNascimento, Nome: string;
  DataNascimento: TDate;
  SaldoDevedor: Double;
begin
  if Req.Body.IsEmpty then
  begin
    Res.Status(400).Send('Corpo da requisição vazio.');
    Exit;
  end;

  JSONStr := Req.Body;
  JSONObj := nil;

  try
    JSONObj := TJSONObject.ParseJSONValue(JSONStr) as TJSONObject;
    if JSONObj = nil then
      raise Exception.Create('JSON inválido ou mal formado.');

    if not JSONObj.TryGetValue<string>('Nome', Nome) then
      raise Exception.Create('Nome não encontrado ou inválido.');

    if JSONObj.TryGetValue<string>('DataNascimento', strDataNascimento) then
    begin
      try
        DataNascimento := StrToDate(strDataNascimento);
      except
        on E: EConvertError do
          raise Exception.Create('Data de nascimento inválida.');
      end;
    end;

    if not JSONObj.TryGetValue<Double>('SaldoDevedor', SaldoDevedor) then
      raise Exception.Create('SaldoDevedor não encontrado ou inválido.');

    Controller.AdicionarPessoaBanco(Nome, DataNascimento, SaldoDevedor);
    Res.Status(201).Send('Pessoa adicionada com sucesso!');
  except
    on E: Exception do
      Res.Status(400).Send('Erro ao adicionar pessoa: ' + E.Message);
  end;

  JSONObj.Free;
end;

procedure AdicionarPessoaMemoriaBanco(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    Controller.AdicionarPessoaMemoriaBanco;
    Res.Status(201).Send('Pessoa adicionada com sucesso!');
  except
    on E: Exception do
      Res.Status(400).Send('Erro inesperado: ' + E.Message);
  end;
end;

procedure AdicionarPessoaMemoria(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  JSONStr: string;
  JSONObj: TJSONObject;
  strDataNascimento, Nome: string;
  DataNascimento: TDate;
  SaldoDevedor: Double;
begin
  if Req.Body.IsEmpty then
  begin
    Res.Status(400).Send('Corpo da requisição vazio.');
    Exit;
  end;

  JSONStr := Req.Body;
  JSONObj := nil;

  try
    JSONObj := TJSONObject.ParseJSONValue(JSONStr) as TJSONObject;
    if JSONObj = nil then
      raise Exception.Create('JSON inválido ou mal formado.');

    if not JSONObj.TryGetValue<string>('Nome', Nome) then
      raise Exception.Create('Nome não encontrado ou inválido.');

    if JSONObj.TryGetValue<string>('DataNascimento', strDataNascimento) then
    begin
      try
        DataNascimento := StrToDate(strDataNascimento);
      except
        on E: EConvertError do
          raise Exception.Create('Data de nascimento inválida.');
      end;
    end;

    if not JSONObj.TryGetValue<Double>('SaldoDevedor', SaldoDevedor) then
      raise Exception.Create('SaldoDevedor não encontrado ou inválido.');

    Controller.AdicionarPessoaMemoria(Nome, DataNascimento, SaldoDevedor);
    Res.Status(201).Send('Pessoa adicionada à memória com sucesso!');
  except
    on E: Exception do
      Res.Status(400).Send('Erro ao adicionar pessoa: ' + E.Message);
  end;

  JSONObj.Free;
end;

procedure ExcluirPessoa(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  PessoaID: Integer;
begin
  PessoaID := Req.Params.Items['id'].ToInteger;
  try
    Controller.ExcluirPessoaPorId(PessoaID);
    Res.Status(200).Send('Pessoa removida com sucesso!');
  except
    on E: Exception do
      Res.Status(400).Send('Erro inesperado: ' + E.Message);
  end;
end;

procedure ListarPessoasId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  PessoaID: Integer;
  Query: TFDQuery;
  JSONObj: TJSONObject;
  JSONArray: TJSONArray;
begin
  PessoaID := Req.Params.Items['id'].ToInteger;
  JSONArray := TJSONArray.Create;
  try
    Query := Controller.CarregarPessoaBancoPorId(PessoaID);
    try
      while not Query.Eof do
      begin
        JSONObj := TJSONObject.Create;
        JSONObj.AddPair('Id', TJSONNumber.Create(Query.FieldByName('Id').AsInteger));
        JSONObj.AddPair('Nome', Query.FieldByName('NOME').AsString);
        JSONObj.AddPair('DataNascimento', Query.FieldByName('DATA_NASCIMENTO').AsString);
        JSONObj.AddPair('SaldoDevedor', TJSONNumber.Create(Query.FieldByName('SALDO_DEVEDOR').AsFloat));

        JSONArray.AddElement(JSONObj);
        Query.Next;
      end;

      Res.Status(200).Send(JSONArray.ToJSON);
    finally
      Query.Free;
    end;
  except
    on E: Exception do
      Res.Status(500).Send('Erro ao buscar pessoas no banco de dados: ' + E.Message);
  end;
end;

procedure RegistrarEndpoints;
begin
  Controller := TServidorController.Create(Conexao.Model.Connect);

  THorse.Get('/pessoas', ListarPessoas);
  THorse.Get('/pessoas/:id', ListarPessoasId);
  THorse.Get('/pessoas/memoria', ListarPessoasMemoria);
  THorse.Post('/pessoas', AdicionarPessoa);
  THorse.Post('pessoas/memoria', AdicionarPessoaMemoria);
  THorse.Post('/pessoas/memoria/banco', AdicionarPessoaMemoriaBanco);
  THorse.Delete('/pessoas/:id', ExcluirPessoa);
end;

procedure DestroyControllerServer;
begin
  Controller.Destroy;
end;

end.

